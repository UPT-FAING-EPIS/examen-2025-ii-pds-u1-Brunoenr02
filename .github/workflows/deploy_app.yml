name: Despliegue de Aplicaci√≥n

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Autenticaci√≥n en GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configuraci√≥n de gcloud
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          gcloud config set compute/region us-central1
      
      # Construir im√°genes y subir a Artifact Registry
      - name: Configurar Docker
        run: gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Build & Push Frontend Docker Image
        run: |
          docker build -t us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/babysitter-repo/frontend:latest ./frontend
          docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/babysitter-repo/frontend:latest

      - name: Build & Push Backend Docker Image
        run: |
          docker build -t us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/babysitter-repo/backend:latest ./backend
          docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/babysitter-repo/backend:latest

      # Deploy a Kubernetes
      - name: Obtener credenciales cluster
        run: gcloud container clusters get-credentials babysitter-cluster --region us-central1

      - name: Instalar gke-gcloud-auth-plugin
        run: |
          # Add Google Cloud's official apt repository key
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
          # Add the repository to the apt sources list
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
          # Update package lists
          sudo apt-get update
          # Install the gke-gcloud-auth-plugin
          sudo apt-get install google-cloud-cli-gke-gcloud-auth-plugin

      - name: Desplegar en GKE
        run: |
          kubectl apply -f k8s/frontend-deployment.yml || echo "Frontend deployment applied"
          kubectl apply -f k8s/backend-deployment.yml || echo "Backend deployment applied"
          kubectl apply -f k8s/services.yml || echo "Services applied"
          kubectl apply -f k8s/ingress.yml || echo "Ingress applied"

      - name: Validar despliegue de la aplicaci√≥n
        run: |
          echo "Esperando por la direcci√≥n IP p√∫blica del Ingress..."
          INGRESS_IP=""
          for i in {1..30}; do
            INGRESS_IP=$(kubectl get ingress babysitter-ingress -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
            if [ -n "$INGRESS_IP" ]; then
              echo "Ingress IP obtenida: http://$INGRESS_IP"
              break
            fi
            echo "El Ingress a√∫n no tiene una IP. Esperando 10 segundos..."
            sleep 10
          done
          
          if [ -z "$INGRESS_IP" ]; then
            echo "‚ùå Error: El Ingress no obtuvo una direcci√≥n IP a tiempo."
            echo "Verificando estado del cluster..."
            kubectl get pods
            kubectl get services
            kubectl get ingress
            exit 1
          fi

          # --- Validar el estado de la aplicaci√≥n ---
          echo "Validando el estado de la aplicaci√≥n en http://$INGRESS_IP/api/health"
          HEALTH_URL="http://$INGRESS_IP/api/health"
          for i in {1..30}; do
            if curl --output /dev/null --silent --head --fail "$HEALTH_URL"; then
              echo "‚úÖ La aplicaci√≥n est√° saludable y respondi√≥ correctamente."
              break
            fi
            echo "La aplicaci√≥n no est√° lista. Esperando 10 segundos..."
            sleep 10
          done

          if [ $? -ne 0 ]; then
              echo "‚ùå Error: La aplicaci√≥n no respondi√≥ a tiempo en la URL de salud."
              echo "Verificando logs del backend..."
              kubectl logs -l app=babysitter-backend --tail=50
              exit 1
          fi

          # --- Probar el endpoint de registro ---
          echo "Probando el endpoint de registro de usuario..."
          PAYLOAD='{"email": "testuser@babysitter.com", "password": "TestPassword123", "name": "Test User", "role": "Parent"}'
          RESPONSE=$(curl -s -X POST "http://$INGRESS_IP/api/auth/register" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD")

          # Verifica si la respuesta contiene un token de autenticaci√≥n
          if echo "$RESPONSE" | grep -q "token"; then
            echo "‚úÖ El registro de usuario fue exitoso y se recibi√≥ un token."
            echo "Respuesta de la API:"
            echo "$RESPONSE"
          else
            echo "‚ö†Ô∏è El registro de usuario tuvo una respuesta diferente."
            echo "Respuesta de la API:"
            echo "$RESPONSE"
            # No fallar si solo es un tema de registro, la app puede estar funcionando
          fi

          # --- Probar el endpoint de ni√±eras ---
          echo "Probando el endpoint de listado de ni√±eras..."
          NANNIES_RESPONSE=$(curl -s "http://$INGRESS_IP/api/nannies")
          
          if echo "$NANNIES_RESPONSE" | grep -q '\[' || echo "$NANNIES_RESPONSE" | grep -q 'nannies'; then
            echo "‚úÖ El endpoint de ni√±eras responde correctamente."
          else
            echo "‚ö†Ô∏è El endpoint de ni√±eras respuesta:"
            echo "$NANNIES_RESPONSE"
          fi

          echo "üéâ Despliegue completado exitosamente!"
          echo "üì± Frontend disponible en: http://$INGRESS_IP"
          echo "üîå API Backend disponible en: http://$INGRESS_IP/api"
