name: Publish Documentation

on:
  push:
    branches: [main]
    paths:
      - 'backend/**/*.cs'
      - 'frontend/src/**/*.tsx'
      - 'frontend/src/**/*.ts'
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

# Permisos necesarios para GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Permitir solo una ejecución concurrente de deploy
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # ============================================================================
  # JOB 1: GENERAR DOCUMENTACIÓN
  # ============================================================================
  generate-docs:
    name: 📚 Generate Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Necesario para git history
        
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
        
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 📦 Install Documentation Tools
      run: |
        # Instalar herramientas para documentación .NET
        dotnet tool install -g docfx
        
        # Instalar herramientas Python para procesamiento
        pip install markdown beautifulsoup4 jinja2 pyyaml
        
        # Crear directorio base de documentación
        mkdir -p _site
        mkdir -p docs/generated
        
    - name: 🔍 Generate .NET API Documentation
      run: |
        cd backend
        
        # Crear archivo docfx.json si no existe
        cat > docfx.json << 'EOF'
        {
          "metadata": [
            {
              "src": [
                {
                  "files": ["**/*.cs"],
                  "exclude": ["bin/**", "obj/**"],
                  "src": "."
                }
              ],
              "dest": "api",
              "properties": {
                "TargetFramework": "net8.0"
              }
            }
          ],
          "build": {
            "content": [
              {
                "files": ["api/**.yml", "api/index.md"]
              },
              {
                "files": ["toc.yml", "*.md"]
              }
            ],
            "resource": [
              {
                "files": ["images/**"]
              }
            ],
            "dest": "../docs/generated/api",
            "globalMetadataFiles": [],
            "fileMetadataFiles": [],
            "template": ["default"],
            "postProcessors": [],
            "keepFileLink": false,
            "disableGitFeatures": false
          }
        }
        EOF
        
        # Crear archivo toc.yml
        cat > toc.yml << 'EOF'
        - name: API Reference
          href: api/
          homepage: api/index.md
        EOF
        
        # Crear index.md para la API
        mkdir -p api
        cat > api/index.md << 'EOF'
        # Babysitter API Documentation
        
        Esta es la documentación generada automáticamente para la API del sistema de Babysitter.
        
        ## Arquitectura
        
        La API está construida con:
        - **.NET Core 8.0**: Framework principal
        - **Entity Framework Core**: ORM para base de datos
        - **MySQL**: Base de datos
        - **JWT Authentication**: Autenticación
        - **Swagger/OpenAPI**: Documentación interactiva
        
        ## Módulos Principales
        
        - **Authentication**: Registro y login de usuarios
        - **Users**: Gestión de usuarios
        - **Nannies**: Gestión de niñeras
        - **Bookings**: Sistema de reservas
        - **Reviews**: Sistema de reseñas
        
        ## Endpoints Principales
        
        | Módulo | Endpoint | Descripción |
        |--------|----------|-------------|
        | Auth | `POST /api/auth/register` | Registro de usuario |
        | Auth | `POST /api/auth/login` | Login de usuario |
        | Users | `GET /api/users` | Listar usuarios |
        | Nannies | `GET /api/nannies` | Listar niñeras |
        | Bookings | `POST /api/bookings` | Crear reserva |
        | Reviews | `POST /api/reviews` | Crear reseña |
        EOF
        
        # Intentar generar documentación con DocFX
        docfx docfx.json || echo "DocFX generation completed with warnings"
        
    - name: ⚛️ Generate Frontend Documentation
      run: |
        cd frontend
        
        # Instalar dependencias si package.json existe
        if [ -f package.json ]; then
          npm ci
        fi
        
        # Crear documentación de componentes React
        cat > ../docs/generated/frontend-guide.md << 'EOF'
        # Frontend Documentation
        
        ## Tecnologías Utilizadas
        
        - **React 18**: Biblioteca principal
        - **TypeScript**: Tipado estático
        - **Material-UI**: Componentes de interfaz
        - **React Router**: Navegación
        - **Axios**: Cliente HTTP
        
        ## Estructura del Proyecto
        
        ```
        frontend/src/
        ├── components/          # Componentes reutilizables
        ├── pages/              # Páginas principales
        ├── services/           # Servicios de API
        ├── types/              # Definiciones TypeScript
        ├── utils/              # Utilidades
        └── App.tsx             # Componente raíz
        ```
        
        ## Componentes Principales
        
        ### Authentication
        - `LoginForm`: Formulario de login
        - `RegisterForm`: Formulario de registro
        - `ProtectedRoute`: Ruta protegida
        
        ### User Management
        - `UserProfile`: Perfil de usuario
        - `UserList`: Lista de usuarios
        
        ### Nanny Features
        - `NannyCard`: Tarjeta de niñera
        - `NannyList`: Lista de niñeras
        - `NannyProfile`: Perfil detallado
        
        ### Booking System
        - `BookingForm`: Formulario de reserva
        - `BookingList`: Lista de reservas
        - `BookingDetails`: Detalles de reserva
        
        ## Guía de Desarrollo
        
        ### Instalación
        ```bash
        cd frontend
        npm install
        npm start
        ```
        
        ### Scripts Disponibles
        - `npm start`: Servidor de desarrollo
        - `npm run build`: Build de producción
        - `npm test`: Ejecutar tests
        - `npm run lint`: Linter
        
        ### Configuración de API
        
        La URL base de la API se configura en `src/services/api.ts`:
        
        ```typescript
        const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';
        ```
        EOF
        
    - name: 📖 Generate Project Documentation
      run: |
        # Crear documentación completa del proyecto
        cat > docs/generated/project-overview.md << 'EOF'
        # Babysitter App - Documentación Completa
        
        ## Descripción del Proyecto
        
        Sistema completo de gestión de servicios de niñeras que permite:
        - Registro y autenticación de usuarios
        - Búsqueda y contratación de niñeras
        - Sistema de reservas y pagos
        - Sistema de reseñas y calificaciones
        
        ## Arquitectura del Sistema
        
        ### Backend (.NET Core 8)
        ```
        backend/
        ├── BabysitterApi/
        │   ├── Controllers/     # Controladores API
        │   ├── Models/          # Modelos de datos
        │   ├── Data/           # Contexto de base de datos
        │   ├── Services/       # Lógica de negocio
        │   └── DTOs/           # Objetos de transferencia
        ```
        
        ### Frontend (React 18)
        ```
        frontend/
        ├── src/
        │   ├── components/     # Componentes React
        │   ├── pages/         # Páginas principales
        │   ├── services/      # Servicios de API
        │   └── types/         # Tipos TypeScript
        ```
        
        ### Infraestructura (Google Cloud)
        ```
        terraform/
        ├── main.tf            # Recursos principales
        ├── variables.tf       # Variables
        └── outputs.tf         # Outputs
        ```
        
        ## Flujo de Datos
        
        1. **Usuario** accede a la aplicación React
        2. **Frontend** realiza llamadas a la API .NET
        3. **Backend** procesa y consulta MySQL
        4. **Respuesta** regresa al frontend
        5. **UI** se actualiza con los datos
        
        ## Despliegue
        
        ### Desarrollo Local
        ```bash
        # Backend
        cd backend/BabysitterApi
        dotnet run
        
        # Frontend
        cd frontend
        npm start
        
        # Base de datos
        docker-compose up mysql
        ```
        
        ### Producción (Google Cloud)
        ```bash
        # Infraestructura
        cd terraform
        terraform apply
        
        # Aplicaciones
        # Se despliegan automáticamente via GitHub Actions
        ```
        
        ## API Endpoints
        
        ### Authentication
        - `POST /api/auth/register` - Registro
        - `POST /api/auth/login` - Login
        
        ### Users
        - `GET /api/users` - Listar usuarios
        - `GET /api/users/{id}` - Obtener usuario
        - `PUT /api/users/{id}` - Actualizar usuario
        
        ### Nannies
        - `GET /api/nannies` - Listar niñeras
        - `GET /api/nannies/{id}` - Obtener niñera
        - `POST /api/nannies` - Registrar como niñera
        
        ### Bookings
        - `GET /api/bookings` - Listar reservas
        - `POST /api/bookings` - Crear reserva
        - `PUT /api/bookings/{id}` - Actualizar reserva
        
        ### Reviews
        - `GET /api/reviews` - Listar reseñas
        - `POST /api/reviews` - Crear reseña
        
        ## Base de Datos
        
        ### Tablas Principales
        - `Usuarios` - Información de usuarios
        - `Nineras` - Perfiles de niñeras
        - `Reservas` - Reservas de servicios
        - `Resenas` - Reseñas y calificaciones
        
        ## Variables de Entorno
        
        ### Backend
        ```env
        DATABASE_URL=mysql://user:pass@host:port/db
        JWT_SECRET=your-secret-key
        ```
        
        ### Frontend
        ```env
        REACT_APP_API_URL=https://api.babysitter.com
        ```
        
        ## Monitoreo y Logs
        
        - **Cloud Run**: Logs automáticos en Google Cloud
        - **Cloud SQL**: Monitoreo de base de datos
        - **GitHub Actions**: Logs de CI/CD
        EOF
        
    - name: 🎨 Build Documentation Site
      run: |
        # Crear estructura HTML para GitHub Pages
        mkdir -p _site
        
        # Crear script Python para generar el sitio
        cat > build_site.py << 'EOF'
        import os
        import markdown
        from pathlib import Path
        import json
        
        def create_html_template(title, content):
            return f"""<!DOCTYPE html>
        <html lang="es">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>{title} - Babysitter App Documentation</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
            <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/themes/prism.min.css" rel="stylesheet">
            <style>
                body {{ font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; }}
                .sidebar {{ background-color: #f8f9fa; min-height: 100vh; }}
                .content {{ padding: 2rem; }}
                pre {{ background-color: #f8f9fa; padding: 1rem; border-radius: 0.5rem; }}
                .nav-link.active {{ background-color: #0d6efd; color: white !important; }}
            </style>
        </head>
        <body>
            <div class="container-fluid">
                <div class="row">
                    <nav class="col-md-3 col-lg-2 d-md-block sidebar collapse">
                        <div class="position-sticky pt-3">
                            <h5 class="px-3 mb-3">📚 Documentación</h5>
                            <ul class="nav flex-column">
                                <li class="nav-item">
                                    <a class="nav-link" href="index.html">🏠 Inicio</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" href="project-overview.html">📋 Vista General</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" href="api-docs.html">🔌 API Backend</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" href="frontend-guide.html">⚛️ Frontend</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" href="diagrams.html">📊 Diagramas</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" href="deployment.html">🚀 Despliegue</a>
                                </li>
                            </ul>
                        </div>
                    </nav>
                    
                    <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
                        <div class="content">
                            {content}
                        </div>
                    </main>
                </div>
            </div>
            
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/components/prism-core.min.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/plugins/autoloader/prism-autoloader.min.js"></script>
        </body>
        </html>"""
        
        def convert_md_to_html(md_file, output_file):
            with open(md_file, 'r', encoding='utf-8') as f:
                md_content = f.read()
            
            html_content = markdown.markdown(md_content, extensions=['codehilite', 'tables', 'toc'])
            title = os.path.basename(md_file).replace('.md', '').replace('-', ' ').title()
            
            full_html = create_html_template(title, html_content)
            
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(full_html)
        
        # Crear página principal
        index_content = """
        # 🏠 Babysitter App - Documentación
        
        Bienvenido a la documentación completa del sistema Babysitter App.
        
        ## 📋 Contenido Disponible
        
        ### [📋 Vista General del Proyecto](project-overview.html)
        Descripción completa del sistema, arquitectura y flujo de datos.
        
        ### [🔌 Documentación de API](api-docs.html)
        Referencia completa de endpoints, modelos y ejemplos de uso.
        
        ### [⚛️ Guía Frontend](frontend-guide.html)
        Documentación de componentes React, estructura y desarrollo.
        
        ### [📊 Diagramas](diagrams.html)
        Diagramas de arquitectura, clases y componentes.
        
        ### [🚀 Guía de Despliegue](deployment.html)
        Instrucciones para desarrollo local y despliegue en producción.
        
        ## 🚀 Inicio Rápido
        
        ### Desarrollo Local
        
        1. **Clonar repositorio**:
           ```bash
           git clone https://github.com/UPT-FAING-EPIS/examen-2025-ii-pds-u1-Brunoenr02.git
           cd examen-2025-ii-pds-u1-Brunoenr02
           ```
        
        2. **Backend**:
           ```bash
           cd backend/BabysitterApi
           dotnet restore
           dotnet run
           ```
        
        3. **Frontend**:
           ```bash
           cd frontend
           npm install
           npm start
           ```
        
        4. **Base de datos**:
           ```bash
           docker-compose up mysql
           ```
        
        ## 🏗️ Arquitectura
        
        - **Frontend**: React 18 + TypeScript + Material-UI
        - **Backend**: .NET Core 8 + Entity Framework + MySQL
        - **Infraestructura**: Google Cloud Platform + Terraform
        - **CI/CD**: GitHub Actions
        
        ## 📞 Soporte
        
        Para dudas o problemas:
        - 📧 Email: soporte@babysitterapp.com
        - 🐛 Issues: [GitHub Issues](https://github.com/UPT-FAING-EPIS/examen-2025-ii-pds-u1-Brunoenr02/issues)
        - 📖 Wiki: [GitHub Wiki](https://github.com/UPT-FAING-EPIS/examen-2025-ii-pds-u1-Brunoenr02/wiki)
        """
        
        with open('_site/index.html', 'w', encoding='utf-8') as f:
            f.write(create_html_template('Inicio', markdown.markdown(index_content, extensions=['codehilite', 'tables'])))
        
        # Convertir archivos markdown existentes
        docs_dir = Path('docs/generated')
        if docs_dir.exists():
            for md_file in docs_dir.glob('*.md'):
                html_file = f'_site/{md_file.stem}.html'
                convert_md_to_html(md_file, html_file)
        
        # Crear página de diagramas
        diagrams_content = """
        # 📊 Diagramas del Sistema
        
        ## 🏗️ Diagrama de Infraestructura
        
        ![Infrastructure](../docs/diagrams/infrastructure.png)
        
        ## 📊 Diagrama de Clases - Backend
        
        ![Backend Classes](../docs/diagrams/classes/backend_classes.png)
        
        ## ⚛️ Diagrama de Componentes - Frontend
        
        ![Frontend Components](../docs/diagrams/classes/frontend_components.png)
        
        ## 📋 Arquitectura Mermaid
        
        Los diagramas interactivos están disponibles en:
        - [Infrastructure Mermaid](../docs/diagrams/infrastructure.md)
        - [Classes Documentation](../docs/diagrams/classes/README.md)
        """
        
        with open('_site/diagrams.html', 'w', encoding='utf-8') as f:
            f.write(create_html_template('Diagramas', markdown.markdown(diagrams_content, extensions=['codehilite'])))
        
        # Crear página de despliegue
        deployment_content = """
        # 🚀 Guía de Despliegue
        
        ## 🔧 Desarrollo Local
        
        ### Prerrequisitos
        - .NET 8.0 SDK
        - Node.js 18+
        - Docker y Docker Compose
        - MySQL (opcional, incluido en docker-compose)
        
        ### Configuración
        
        1. **Variables de entorno**:
           ```bash
           cp .env.example .env
           # Editar .env con tus configuraciones
           ```
        
        2. **Base de datos**:
           ```bash
           docker-compose up -d mysql
           ```
        
        3. **Backend**:
           ```bash
           cd backend/BabysitterApi
           dotnet restore
           dotnet ef database update
           dotnet run
           ```
        
        4. **Frontend**:
           ```bash
           cd frontend
           npm install
           npm start
           ```
        
        ## ☁️ Despliegue en Google Cloud
        
        ### Infraestructura
        
        La infraestructura se despliega automáticamente con Terraform:
        
        ```bash
        cd terraform
        terraform init
        terraform plan
        terraform apply
        ```
        
        ### Aplicaciones
        
        Las aplicaciones se despliegan automáticamente via GitHub Actions cuando:
        - Se hace push a la rama `main`
        - Se ejecuta manualmente el workflow
        
        ### Variables de Entorno en Producción
        
        Configurar en GitHub Secrets:
        - `GCP_SA_KEY`: Service Account Key de Google Cloud
        - `GCP_PROJECT_ID`: ID del proyecto en GCP
        - `DATABASE_PASSWORD`: Contraseña de la base de datos
        - `JWT_SECRET_KEY`: Clave secreta para JWT
        
        ## 🔍 Monitoreo
        
        ### Logs
        - **Cloud Run**: Google Cloud Console → Cloud Run → Logs
        - **Cloud SQL**: Google Cloud Console → SQL → Logs
        - **GitHub Actions**: GitHub → Actions → Workflow runs
        
        ### Métricas
        - **Performance**: Cloud Run métricas automáticas
        - **Disponibilidad**: Health checks automáticos
        - **Errores**: Error reporting automático
        
        ## 🛠️ Troubleshooting
        
        ### Problemas Comunes
        
        1. **Error de conexión a base de datos**:
           - Verificar que Cloud SQL esté ejecutándose
           - Revisar string de conexión
           - Verificar firewall rules
        
        2. **Imagen Docker no encontrada**:
           - Verificar que las imágenes estén en Artifact Registry
           - Revisar tags de las imágenes
           - Ejecutar workflow de build
        
        3. **Error 502 en Cloud Run**:
           - Revisar logs de la aplicación
           - Verificar health check endpoint
           - Revisar recursos (CPU/Memory)
        """
        
        with open('_site/deployment.html', 'w', encoding='utf-8') as f:
            f.write(create_html_template('Despliegue', markdown.markdown(deployment_content, extensions=['codehilite', 'tables'])))
        
        print("✅ Documentation site generated successfully!")
        EOF
        
        python build_site.py
        
    - name: 📤 Upload Documentation Artifact
      uses: actions/upload-pages-artifact@v2
      with:
        path: '_site'

  # ============================================================================
  # JOB 2: DEPLOY A GITHUB PAGES
  # ============================================================================
  deploy:
    name: 🌐 Deploy to GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: generate-docs
    
    steps:
    - name: 🚀 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2
      
    - name: 📊 Generate Summary
      run: |
        echo "## 📚 Documentation Published Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🌐 Site URL:" >> $GITHUB_STEP_SUMMARY
        echo "[${{ steps.deployment.outputs.page_url }}](${{ steps.deployment.outputs.page_url }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Available Pages:" >> $GITHUB_STEP_SUMMARY
        echo "- 🏠 **Home**: Main documentation hub" >> $GITHUB_STEP_SUMMARY
        echo "- 📋 **Project Overview**: Complete system description" >> $GITHUB_STEP_SUMMARY
        echo "- 🔌 **API Docs**: Backend API reference" >> $GITHUB_STEP_SUMMARY
        echo "- ⚛️ **Frontend Guide**: React components documentation" >> $GITHUB_STEP_SUMMARY
        echo "- 📊 **Diagrams**: Architecture and class diagrams" >> $GITHUB_STEP_SUMMARY
        echo "- 🚀 **Deployment**: Local and production setup guides" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔄 Auto-Update:" >> $GITHUB_STEP_SUMMARY
        echo "Documentation updates automatically when code changes." >> $GITHUB_STEP_SUMMARY