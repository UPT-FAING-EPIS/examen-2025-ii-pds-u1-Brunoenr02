name: Diagrama de Infraestructura

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  generate-diagram:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      actions: read
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      
      - name: Install Graphviz
        run: sudo apt-get install -y graphviz
      
      - name: Install terraform-docs
        run: |
          curl -Lo ./terraform-docs.tar.gz https://github.com/terraform-docs/terraform-docs/releases/download/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/
      
      - name: Generate Terraform Graph
        working-directory: terraform
        run: |
          terraform init
          
          # Crear directamente un archivo DOT simplificado sin usar terraform graph
          echo "Creando diagrama simplificado de infraestructura..."
          cat > terraform-graph.dot << EOF
          digraph {
            rankdir = LR;
            
            // Nodos principales - Servicios de Google Cloud
            "google_project_service" [shape=box, style=filled, fillcolor=lightblue, label="Google Cloud\\nAPIs"];
            "google_sql_database_instance" [shape=box, style=filled, fillcolor=lightgreen, label="Cloud SQL\\nMySQL"];
            "google_sql_database" [shape=box, style=filled, fillcolor=lightgreen, label="BabysitterApp\\nDatabase"];
            "google_sql_user" [shape=box, style=filled, fillcolor=lightgreen, label="Database\\nUser"];
            "google_artifact_registry_repository" [shape=box, style=filled, fillcolor=orange, label="Artifact Registry\\nDocker Images"];
            "google_cloud_run_service_backend" [shape=box, style=filled, fillcolor=yellow, label="Cloud Run\\nBackend API"];
            "google_cloud_run_service_frontend" [shape=box, style=filled, fillcolor=yellow, label="Cloud Run\\nFrontend React"];
            
            // Relaciones principales
            "google_project_service" -> "google_sql_database_instance";
            "google_project_service" -> "google_artifact_registry_repository";
            "google_sql_database_instance" -> "google_sql_database";
            "google_sql_database_instance" -> "google_sql_user";
            "google_artifact_registry_repository" -> "google_cloud_run_service_backend";
            "google_artifact_registry_repository" -> "google_cloud_run_service_frontend";
            "google_sql_database" -> "google_cloud_run_service_backend";
            "google_sql_user" -> "google_cloud_run_service_backend";
            "google_cloud_run_service_backend" -> "google_cloud_run_service_frontend";
            
            // ConfiguraciÃ³n del grÃ¡fico
            label = "Babysitter App - Infraestructura en Google Cloud Platform";
            fontsize = 20;
            fontname = "Arial Bold";
            
            // Subgrafos para agrupar componentes
            subgraph cluster_0 {
              label = "Database Layer";
              style = filled;
              fillcolor = lightgray;
              "google_sql_database_instance";
              "google_sql_database";
              "google_sql_user";
            }
            
            subgraph cluster_1 {
              label = "Application Layer";
              style = filled;
              fillcolor = lightyellow;
              "google_cloud_run_service_backend";
              "google_cloud_run_service_frontend";
            }
            
            subgraph cluster_2 {
              label = "Container Registry";
              style = filled;
              fillcolor = lightcyan;
              "google_artifact_registry_repository";
            }
          }
          EOF
          
          # Generar imagen con el archivo DOT creado manualmente
          dot -Tpng terraform-graph.dot -o terraform-graph.png
      
      - name: Generate Infrastructure Documentation
        working-directory: terraform
        run: |
          terraform-docs markdown . > infra-docs.md
      
      - name: Commit and Push Diagram
        run: |
          git config --local user.name "${{ github.actor }}"
          git config --local user.email "${{ github.actor }}@users.noreply.github.com"
          mkdir -p docs/diagrams
          cp terraform/terraform-graph.png docs/diagrams/
          cp terraform/infra-docs.md docs/
          git add docs/diagrams/terraform-graph.png docs/infra-docs.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "ðŸ“Š Actualizar diagrama de infraestructura
            
            - Diagrama actualizado automÃ¡ticamente
            - DocumentaciÃ³n de Terraform actualizada
            
            [skip ci]"
            git push
            echo "âœ… Diagrams updated successfully!"
          fi